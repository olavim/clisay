// Basic arithmetic precedence
print(3 + 5 * 2);               // expect: 13
print(5 * 2 + 3);               // expect: 13
print(10 / 5 - 1);              // expect: 1
print(10 - 6 / 2);              // expect: 7
print(12 / 3 * 2);              // expect: 8
print(8 / 4 / 2);               // expect: 1

// Same precedence associativity
print(10 - 5 - 3);              // expect: 2
print(5 - 3 + 2);               // expect: 4
print(2 | 4 ^ 1);               // expect: 7
print(2 | (4 ^ 1));             // expect: 7
print((2 | 4) ^ 1);             // expect: 7

// Bitwise vs comparisons
print(5 & 3 == 1);              // expect: true
print(5 << 1 > 10);             // expect: false
print(5 + 3 < 10 - 2);          // expect: false

// Shift operators
print(2 + 3 << 1);              // expect: 10
print(8 >> 1 + 1);              // expect: 2
print(4 << 2 * 3);              // expect: 256

// Logical operators
print(false || false || true);  // expect: true
print(true && true && false);   // expect: false
print(true && false || true);   // expect: true

// Equality checks
print(5 == 5 != false);         // expect: true
print(5 == 3 + 2);              // expect: true
print(10 / 2 == 2 + 3);         // expect: true

// Assignments
say a;
a = 1 + 2 * 3 << 1;
print(a);                       // expect: 14
say b = 2;
say c = 3;
a = b = c;
print(a);                       // expect: 3
print(b);                       // expect: 3
print(c);                       // expect: 3

// Complex combinations
print(3 + 4 * 2 << 1 > 10);     // expect: true
print(5 & 1 * 3 + 2);           // expect: 5
print(10 - 2 * 3 << 1 == 8);    // expect: true
print(15 >> 1 * 2 + 1);         // expect: 1
print(1 << 2 + 3 * 2);          // expect: 256